"""
1. Отсортируйте по убыванию методом пузырька одномерный целочисленный массив,
заданный случайными числами на промежутке [-100; 100).
Выведите на экран исходный и отсортированный массивы.

Примечания:
a. алгоритм сортировки должен быть в виде функции, которая принимает на вход
массив данных,
b. постарайтесь сделать алгоритм умнее, но помните, что у вас должна остаться
сортировка пузырьком. Улучшенные версии сортировки, например, расчёской,
шейкерная и другие в зачёт не идут.
"""
"""
1. Отсортируйте по убыванию методом "пузырька" одномерный целочисленный массив,
заданный случайными числами на промежутке [-100; 100). Выведите на экран
исходный и отсортированный массивы. Сортировка должна быть реализована в
виде функции. Обязательно доработайте алгоритм (сделайте его умнее).
Идея доработки: если за проход по списку не совершается ни одной сортировки,
то завершение
Обязательно сделайте замеры времени обеих реализаций
и обосновать дала ли оптимизация эффективность
Подсказка: обратите внимание, сортируем не по возрастанию, как в примере,
а по убыванию
"""
from timeit import default_timer as timer

start = timer()
from random import randint

N = 10
array = []

for i in range(N):
    array.append(randint(-100, 100))

for i in array:
    print(i, end=' ')

print()
end = timer()
print(end - start)

print('--------------------------------------')

start = timer()
N = 10
a = []

for i in range(N):
    a.append(randint(-100, 100))
    print(a)

for i in range(N-1):
    for j in range(N-i-1):
        if a[j] > a[j+1]:
            b = a[j]
            a[j] = a[j+1]
            a[j+1] = b
print(a)

end = timer()
print(end - start)
print('Сортировка пузырьком')
print('---------------------------------------')
