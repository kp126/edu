from functools import reduce

"""
1. Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника.
В расчете необходимо использовать формулу: (выработка в часах * ставка в час) + премия.
Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами.
"""

print('\nЗадание 1')

print('Используй скрипт 4zp.py и введи 3 значения:\n'
      '1) Выработка в часах\n2) Ставка в час\n3) Премия\n\n'
      'Можешь скопировать: python 4zp.py 10 10 10\nИ не забудь добавить путь к файлу! :)\n')

"""
2. Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для формирования списка использовать генератор.
Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
Результат: [12, 44, 4, 10, 78, 123].
"""

print('\nЗадание 2')

in_list = [300, 2, 12, 44, 1, 12, 1, 12, 4, 10, 7, 1, 12, 78, 123, 55]  # список изменен
print([number for number_index, number in enumerate(in_list[1:], 1) if number > in_list[number_index - 1]])

"""
3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Необходимо решить задание в одну строку.
Подсказка: использовать функцию range() и генератор.
"""

print('\nЗадание 3')

print([n for n in range(20, 240) if n % 20 == 0 or n % 21 == 0])

"""
4. Представлен список чисел. Определить элементы списка, не имеющие повторений. 
Сформировать итоговый массив чисел, соответствующих требованию. 
Элементы вывести в порядке их следования в исходном списке. 
Для выполнения задания обязательно использовать генератор.
Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
Результат: [23, 1, 3, 10, 4, 11]
"""

print('\nЗадание 4')

in_list = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]

print([n for n in in_list if in_list.count(n) == 1])

"""
5. Реализовать формирование списка, используя функцию range() и возможности генератора. 
В список должны войти четные числа от 100 до 1000 (включая границы). 
Необходимо получить результат вычисления произведения всех элементов списка.
Подсказка: использовать функцию reduce().
"""

print('\nЗадание 5')

print(reduce(lambda x, y: x * y, [n for n in range(100, 1001) if n % 2 == 0]))

"""
6. Реализовать два небольших скрипта:
а) итератор, генерирующий целые числа, начиная с указанного,
б) итератор, повторяющий элементы некоторого списка, определенного заранее.
Подсказка: использовать функцию count() и cycle() модуля itertools. 
Обратите внимание, что создаваемый цикл не должен быть бесконечным. Необходимо предусмотреть условие его завершения.
Например, в первом задании выводим целые числа, начиная с 3, а при достижении числа 10 завершаем цикл. 
Во втором также необходимо предусмотреть условие, при котором повторение элементов списка будет прекращено.
"""

print('\nЗадание 6')

print('Используй скрипт 461.py и введи 1 значение:\n'
      'С какого числа начинать генерировать целые числа\n\n'
      'Можешь скопировать: python 461.py 10\nИ не забудь добавить путь к файлу! :)\n')

print('Используй скрипт 462.py и введи 1 значение:\n'
      'Какое количество раз выполнять повторение элементов списка ["ABC"]\n\n'
      'Можешь скопировать: python 462.py 10\nИ не забудь добавить путь к файлу! :)')

"""
7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение. 
При вызове функции должен создаваться объект-генератор. Функция должна вызываться следующим образом: for el in fact(n). 
Функция отвечает за получение факториала числа, 
а в цикле необходимо выводить только первые n чисел, начиная с 1! и до n!.
Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.
"""

print('\nЗадание 7\n')


def fact(n):
    x = 1
    for el in range(1, n + 1):
        x *= el
        yield x


n = 5
print(f'{n = }')
while True:
    g = fact(n)
    while True:
        try:
            print(next(g))
        except StopIteration:
            print('Закончились значения в генераторе range(1, n)')
            n = int(input('Введи другое значение n: '))
            break
